
/* Conhecendo o @extend */
%btn{  // placeholder - eles são omitidos no css
    min-width: 150px;
    padding: 10px 20px;
}

// algo para tomar cuidado quando está usando o @extend: Manter os seletores simples
// e se você não está usando no lugar errado


.my-container, .header, .footer{
    .btn-confirm{
        background-color: green;
        color: white;
        @extend %btn;
        // quando for fazer o @extend ele vai pegar cada um das combinações possíveis
    }
}

.modal, .table, .menu{
    .button-group{
        .btn-cancel{
            background-color: red;
            color: white;
            @extend %btn;
        }
    }
}

/*  Observe sempre se seus seletores estão simples, ou isso pode acontecer

// se for necessários as camadas de seletores, use um mixin, pois eles não fará isso

.my-container .btn-confirm,
.header .btn-confirm,
.footer .btn-confirm,
.modal .button-group .btn-cancel,
.table .button-group .btn-cancel,
.menu .button-group .btn-cancel{
    min-width: 150px;
    padding: 10px 20px;
}

.my-container .btn-confirm,
.header .btn-confirm,
.footer .btn-confirm{
    background-color: green;
    color: white;
}

.modal .button-group .btn-cancel,
.table .button-group .btn-cancel,
.menu .button-group .btn-cancel{
    background-color: red;
    color: white;
}

*/



/*

// se for um mixin ele injetaria o código de btn dentro de btn-confirm
// porém ele agrupou btn-confirm com btn, evitando repetição

.btn-confirm, btn-cancel{
    min-width: 150px;
    padding: 10px 20px;
}

.btn-confirm{
    background-color: green;
    color: white;
}

*/

/*
Quando usar mixin e placeholder ?

placeholder ele vai fazer com que todo os seletores onde a gente está usando fiquem
juntos em um lugar só evitando a repetição.

mixins aceitam argumentos e blocos de códigos então podemos alterar os valores e condições,
os mixins podem ser sempre variáveis.


*/
